import { Answer } from './questions.js';

export function generateMarkdownReport(answers: Answer[], exitMessage?: string): string {
  const timestamp = new Date().toISOString().split('T')[0];
  
  if (exitMessage) {
    return `# Project Support Assessment

**Date:** ${timestamp}

## Result

${exitMessage}
`;
  }

  let markdown = `# Project Support Assessment

**Date:** ${timestamp}

## Your Responses

`;

  answers.forEach((answer, index) => {
    const questionNumber = index + 1;
    const questionText = getQuestionTextById(answer.questionId);
    
    markdown += `### ${questionNumber}. ${questionText}

**Answer:** ${answer.optionText}

`;
  });

  markdown += `## Assessment Summary

Based on your responses, this assessment captures your current project's approach to supporting commercial users and implementing security practices.

---
*Generated by Project Support Assessment Tool*
`;

  return markdown;
}

function getQuestionTextById(questionId: string): string {
  const questionTexts: Record<string, string> = {
    'commercial-support': 'Do you have or support commercial users of your project?',
    'security-practices': 'Do you follow any security practices in your development workflow?',
    'vulnerability-management': 'How does your project manage reported vulnerabilities?',
    'security-design': 'Does your project perform any sort of explicit security design, including threat modelling or testing?'
  };
  
  return questionTexts[questionId] || 'Unknown question';
}

export function downloadMarkdown(content: string, filename: string): void {
  const blob = new Blob([content], { type: 'text/markdown' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
